#!/usr/bin/env perl

use strict;
use warnings;

use JSON::XS;

my $json = JSON::XS->new->canonical;

&printResult(&dispatch(@ARGV));

sub printResult {
    my $result = shift;
    print "$result";
}

sub dispatch {
    if(scalar(@_) == 0){
        &usage();
    }

    my $cmd = shift;
    my $result = undef;

    my %cmds = ( step => \&call_step
, sigmoid => \&call_sigmoid
, sigmoid_prime => \&call_sigmoid_prime
, tanh => \&call_tanh
, tanh_prime => \&call_tanh_prime
, relu => \&call_relu );

    if($cmd eq '-h' || $cmd eq '-?' || $cmd eq '--help' || $cmd eq '?'){
        &usage();
    }

    if(exists($cmds{$cmd})){
        $result = $cmds{$cmd}(@_);
    } else {
        print STDERR "Command '$cmd' not found\n";
        &usage();
    }

    return $result;
}


sub usage{
    print STDERR "The following commands are exported:\n";
    print STDERR "  step\n";
    print STDERR q{    param 1: Num}, "\n";
    print STDERR q{    return: Num}, "\n";
    print STDERR "  sigmoid\n";
    print STDERR q{    param 1: Num}, "\n";
    print STDERR q{    return: Num}, "\n";
    print STDERR "  sigmoid_prime\n";
    print STDERR q{    param 1: Num}, "\n";
    print STDERR q{    return: Num}, "\n";
    print STDERR "  tanh\n";
    print STDERR q{    param 1: Num}, "\n";
    print STDERR q{    return: Num}, "\n";
    print STDERR "  tanh_prime\n";
    print STDERR q{    param 1: Num}, "\n";
    print STDERR q{    return: Num}, "\n";
    print STDERR "  relu\n";
    print STDERR q{    param 1: Num}, "\n";
    print STDERR q{    return: Num}, "\n";
    exit 0;
}



sub call_step{
    if(scalar(@_) != 1){
        print STDERR "Expected 1 arguments to 'step', given " . 
        scalar(@_) . "\n";
        exit 1;
    }
    return `./pool-cpp.out 19 '$_[0]'`;
}


sub call_sigmoid{
    if(scalar(@_) != 1){
        print STDERR "Expected 1 arguments to 'sigmoid', given " . 
        scalar(@_) . "\n";
        exit 1;
    }
    return `./pool-cpp.out 20 '$_[0]'`;
}


sub call_sigmoid_prime{
    if(scalar(@_) != 1){
        print STDERR "Expected 1 arguments to 'sigmoid_prime', given " . 
        scalar(@_) . "\n";
        exit 1;
    }
    return `./pool-cpp.out 21 '$_[0]'`;
}


sub call_tanh{
    if(scalar(@_) != 1){
        print STDERR "Expected 1 arguments to 'tanh', given " . 
        scalar(@_) . "\n";
        exit 1;
    }
    return `./pool-cpp.out 22 '$_[0]'`;
}


sub call_tanh_prime{
    if(scalar(@_) != 1){
        print STDERR "Expected 1 arguments to 'tanh_prime', given " . 
        scalar(@_) . "\n";
        exit 1;
    }
    return `./pool-cpp.out 23 '$_[0]'`;
}


sub call_relu{
    if(scalar(@_) != 1){
        print STDERR "Expected 1 arguments to 'relu', given " . 
        scalar(@_) . "\n";
        exit 1;
    }
    return `./pool-cpp.out 24 '$_[0]'`;
}


